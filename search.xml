<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对vscodeC++11标准的环境配置</title>
    <url>/2020/03/19/%E5%AF%B9vscodeC-11%E6%A0%87%E5%87%86%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>自从学了java以后，发现自己对C++有些疏于练习了，因为很多地方java的优势性和应用性是强于c语言的。当然，这是对普通的编码工作来说，C语言在造轮子方面有他无与伦比的优势，甚至C语言可以直接用来写操作系统。但是虽然C有些不方便，C++却因为它强大的stl库流行于学生之间，计算机专业的考研大纲规定，只允许用C/C++来编程，于是我又赶回来复习C++，但却突然发现，大一时候的工具用起来都不太爽利，codeblocks有时候会出现一些小bug（个人印象），dev虽然功能强大，适合初学者，但是在大量的编码工作时，由于缺少代码提示，所以使用起来也不太方便，visual studio又由于它的笨重型（超达20多个G）不适合成为中小型CPP的编写工具，于是我就只能另寻轻量级的编辑器，通过加载插件和配置环境的方法来实现，他就是VSCode。</br><br>其实，dev会作为很多比赛的官方编程软件，熟悉的使用它会很有帮助，我个人原因是因为当对stl库进行调试时，无法看到stl变量的值，于是通过网上铺天盖地的教程配置了C++环境，很多教程都说的很清楚了，我就总结一下各个部分实现的功能。</p>
<h3 id="一、launch-json"><a href="#一、launch-json" class="headerlink" title="一、launch.json"></a>一、launch.json</h3><pre><code>{
&quot;version&quot;: &quot;0.2.0&quot;,
&quot;configurations&quot;: [
    {
        &quot;name&quot;: &quot;TDM_GCC(gdb) Launch&quot;,    // 配置名称，将会在启动配置的下拉菜单中显示
        &quot;type&quot;: &quot;cppdbg&quot;,         // 配置类型，这里只能为cppdbg
        &quot;request&quot;: &quot;launch&quot;,    // 请求配置类型，可以为launch（启动）或attach（附加）
        &quot;program&quot;: &quot;${workspaceRoot}/${fileBasenameNoExtension}.exe&quot;,// 将要进行调试的程序的路径
        &quot;args&quot;: [],                // 程序调试时传递给程序的命令行参数，一般设为空即可
        &quot;stopAtEntry&quot;: false,     // 设为true时程序将暂停在程序入口处，一般设置为false
        &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,// 调试程序时的工作目录，一般为${workspaceRoot}即代码所在目录
        &quot;environment&quot;: [],
        &quot;externalConsole&quot;: true,// 调试时是否显示控制台窗口，一般设置为true显示控制台
        &quot;MIMode&quot;: &quot;gdb&quot;,
        &quot;miDebuggerPath&quot;: &quot;E:\\TDM-GCC-64\\bin\\gdb.exe&quot;,// miDebugger的路径，注意这里要与MinGw的路径对应
        &quot;preLaunchTask&quot;: &quot;g++&quot;,    // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc
        &quot;setupCommands&quot;: [
            {
                &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                &quot;ignoreFailures&quot;: true
            }
        ]
    }
]
}</code></pre><p>.json是配置文件的后缀,其中”version”为版本属性，在生成时出现；”configurations”是配置的具体信息，包括配置名字（会出现在调试界面的下拉框里），命令参数，以及debugger程序的路径等等，具体都有注释说明，configurations后面的<code>[]</code>里面是一整套配置，若想添加其他配置可以用逗号分隔来添加；</p>
<h3 id="二、tasks-json文件"><a href="#二、tasks-json文件" class="headerlink" title="二、tasks.json文件"></a>二、tasks.json文件</h3><pre><code>{
&quot;version&quot;: &quot;2.0.0&quot;,
&quot;command&quot;: &quot;g++&quot;,
&quot;args&quot;: [&quot;-std=c++11&quot;,&quot;-g&quot;,&quot;${file}&quot;,&quot;-o&quot;,&quot;${fileBasenameNoExtension}.exe&quot;],
&quot;problemMatcher&quot;: {
    &quot;owner&quot;: &quot;cpp&quot;,
    &quot;fileLocation&quot;: [&quot;relative&quot;, &quot;${workspaceRoot}&quot;],
    &quot;pattern&quot;: {
        &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,
        &quot;file&quot;: 1,
        &quot;line&quot;: 2,
        &quot;column&quot;: 3,
        &quot;severity&quot;: 4,
        &quot;message&quot;: 5
    }
}
  }</code></pre><p>command命令后就是编译命令如g,gcc,g++等等，一般都用g++，C与C++都可以编译；args就是后面跟着的产出文件，因为我特意为了11标准来配置的，所以我在那些教程之外额外添加了”-std=c++11”命令，可以编译一些方便快捷的代码，比如无序哈希表，for循环，如下所示：</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;string&gt;
using namespace std;
int main()
{
    vector&lt;int&gt; list;
    unordered_map&lt;int,int&gt; _map;
    string str=&quot;12346679&quot;;
    for(char c:str)
    {
        cout&lt;&lt;c&lt;&lt;endl;
    }
    list.push_back(5);
    list.push_back(4);
    list.push_back(3);
    _map[0]=8;
    _map[5]=10;
    system(&quot;pause&quot;);
    return 0;
}</code></pre><h3 id="三、c-cpp-properties-json文件"><a href="#三、c-cpp-properties-json文件" class="headerlink" title="三、c_cpp_properties.json文件"></a>三、c_cpp_properties.json文件</h3><p>此文件是在无法识别头文件时使用，但由于我先前使用过codeblocks，dev等软件，头文件路径无需更改，所以没有创建此文件，但是对很多新手来说，没有使用过dev等可能也用不到这个编辑器，所以此处就不多说啦，若有需要网上到处都是，嘻嘻^_^!!</p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>本文是对自己的一个小小总结，也希望这篇默默无闻的博文能帮到一些朋友（猛男哭泣.jpg）</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>-工具</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次晚饭杂感</title>
    <url>/2020/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%99%9A%E9%A5%AD%E6%9D%82%E6%84%9F/</url>
    <content><![CDATA[<p>&emsp;&emsp;<strong>晚</strong>饭前，我意外看到研究生复试大多要考英语听力的消息，瞬时慌了一下。毕竟我当初下决心要考研就是因为初试英语不考听力,虽然说复试中的英语比例没有那么大，但是想到就很慌的有木有！！！<del>_</del>一时间都不知道该不该继续考研这个决定了，因为很有可能自己努力了一年最后却没有收获，而且也失去了秋招春招的机会。可能有人会说你那么想考可以二战啊，但是家里经济情况不允许，虽然不至于供不起我，但是想到还是会很愧疚的啊，不想再平白的被养一年。</br><br>　　到了吃晚饭的时候，一如既往地跟我妈讨论买房的问题，我问妈妈说假如有一套200平的房子因为发生了凶杀案只卖20万你买不买？我妈摇了摇头，转而跟我说起了另一件事。“你知不知道，高唐（我们县城）有一套房子（大概八九十平的样子）只卖11万？”，我说：“不知道啊，为啥？难道也发生了凶杀案？”。“虽然不是凶杀案，但是也差不多了，据说夫妻两人，老婆跳楼了，因为谣传说是男的把女的推下去的，男的也上吊了，不知道上吊原因是愧疚还是别的原因，只剩下一个刚上初中的女儿”，我瞬时惊了一下“啊，上吊，为啥要上吊死啊，买个药喝了不好吗（关注点清奇）？”。我妈白了我一眼，没理我，继续回忆起了那件二十多年前的事情。“后来，那个女儿在她阿姨家生活，我也是在别人的谈话中才了解到原来跳楼的女人和我是一个庄里的，她比我大三岁。小女孩的父母突然决定离世，不知道为什么如此决然，丝毫不考虑自己的孩子。可是你以为关于这家人悲惨的命运就这样了吗？跳楼女人还有个哥哥，原来在东北过活，后来意外被疯狗咬到后突然疯了，于是就回到了老家，躺在床上不能自理，成了周边的大人吓唬小孩子的狼外婆：‘你不要去他家奥，他家里有害了狂犬病的，听见人声就要跳上来将咬你一口！’，于是小孩子就被吓得不敢靠近他家，觉得那里是个妖魔鬼怪的居所。这个男人疯了以后不久，他的老婆就带着一个儿子走了。可能有很多人潜意识里觉得农村的妇女思想封建，还会为死去的或者瘫痪的丈夫守寡什么的，但其实没有，每个人都是现实的，没有谁会为了一个贞节牌坊放弃自己的后半生。像书中的人物还是少之又少，而且我本人也不太赞成那样的做法，何苦为了一个已经不在的人再去为难自己呢？言归正传，在不久后的后来，疯了的男人的父亲老死了，作为唯一一个孙子，小孩子回到这个村子里参加葬礼，小孩子的奶奶也把自己不舍得花的积储都给了他，出乎意料的，本来已经断绝了好几年来往的两辈又来往了起来。但是好景不长，又过了好几年之后，孩子的奶奶也老了，孩子也不再来了。无人照料无人问津的疯男人也不知如何的没有了一点消息，也许是饿死在了那张他长躺的床铺之上。故事到这里就结束了，有点凄凉但很现实的一个真实故事。</br><br>　　在命运与生活面前，没有最不幸只有更不幸，谁也无法预料自己的生活将是什么。听完妈妈讲的故事后，因为英语复试听力考试的那些慌张失措彷徨不安瞬间消了大半。在整个人生面前，那么长久的时间对上这短小的考研一年，似乎很轻易的就战胜了。人生那么多不幸，那么多失意，那么多障碍，总是需要一步一步的去度过的，不管有多么艰难，硬着头皮，尽最大的努力往前冲，做过之后再回首其实没什么的吧！虽然有可能会失败，障碍没有被跃过反而将自己绊倒，也许此时的自己不知如何重新站起，但是，时间会告诉你一切，在长长的时间里，做好最坏的打算，做好心理的预设，但同时不要忘了尽好最大的努力，只要不被击得粉碎，沉稳的等到那个障碍来临，你的选择是沉默还是爆发，是一拳击碎扶摇万里还是跌跌撞撞再起河山亦其实都无所谓，只要看到便足够！
　　</p>
]]></content>
      <categories>
        <category>心情日志</category>
      </categories>
      <tags>
        <tag>-心情 -成长</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中各类型的相互转化方法总结</title>
    <url>/2020/03/06/Java%E4%B8%AD%E5%90%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做java有关的力扣题时，发现自己对java的一些基础知识和基本语法还不是很熟练，所谓“一屋不扫，何以扫天下”，“千里之行，始于足下”，所以此时我决定将一些基础的但却不引人重视的java语法整理一下，方便自己的随时查看和复习，在以后也会有更多的内容归类到这个标签下。本次整理的主题是java类型的转化方法。</p>
<h2 id="一、各类型转化为String"><a href="#一、各类型转化为String" class="headerlink" title="一、各类型转化为String"></a>一、各类型转化为String</h2><h3 id="1-int转化为String"><a href="#1-int转化为String" class="headerlink" title="1. int转化为String"></a>1. int转化为String</h3><p>   int与String之间不能相互直接转化，因为int是java语法中的基本类型，而String是一个类，import自java.util,但可以间接转化：</p>
<pre><code>int a=0;
Integer inter=new Integer(a);
String str=inter.toString();</code></pre><h3 id="2-float转化为String"><a href="#2-float转化为String" class="headerlink" title="2.float转化为String"></a>2.float转化为String</h3><p>与int的转化同理：</p>
<pre><code>float f=3.1415f;
Float flo=new Float(f);
String str=flo.toString();</code></pre><h3 id="3-double转化为String"><a href="#3-double转化为String" class="headerlink" title="3.double转化为String"></a>3.double转化为String</h3><pre><code> double d=3.1415;
Double dou=new Double(d);
String str2=dou.toString();</code></pre><h2 id="二、String-转化为各类型"><a href="#二、String-转化为各类型" class="headerlink" title="二、String 转化为各类型"></a>二、String 转化为各类型</h2><h3 id="1-String转化为int"><a href="#1-String转化为int" class="headerlink" title="1.String转化为int"></a>1.String转化为int</h3><pre><code>int i=Integer.parseInt(str);</code></pre><h3 id="2-String转化为Integer"><a href="#2-String转化为Integer" class="headerlink" title="2.String转化为Integer"></a>2.String转化为Integer</h3><pre><code>Integer inter = Integer.valueOf(str);</code></pre><h3 id="3-String转化为float"><a href="#3-String转化为float" class="headerlink" title="3.String转化为float"></a>3.String转化为float</h3><p>方法float,double,int其实都差不多</p>
<pre><code>float f=Float.parseFloat(str);</code></pre><h2 id="三、int、float、double之间的相互转换"><a href="#三、int、float、double之间的相互转换" class="headerlink" title="三、int、float、double之间的相互转换"></a>三、int、float、double之间的相互转换</h2><p><strong>注意：尽量由小字节向高字节转化，否则易发生数据错误</strong></p>
<h3 id="1-int-gt-float、float-gt-double"><a href="#1-int-gt-float、float-gt-double" class="headerlink" title="1.int-&gt;float、float-&gt;double"></a>1.int-&gt;float、float-&gt;double</h3><pre><code>int i=3;
float f=i;
double d=f;
double d=i;</code></pre><p>自动转化即可。</p>
<h3 id="2-反之"><a href="#2-反之" class="headerlink" title="2.反之"></a>2.反之</h3><p>则需要强制转化</p>
<pre><code>double d=3.1415;
float f =(float)d;</code></pre>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>-java -基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>firstblog</title>
    <url>/2020/03/02/firstblog/</url>
    <content><![CDATA[<h1 id="历经"><a href="#历经" class="headerlink" title="历经"></a>历经</h1><p>将近<strong>半个月</strong>的时间，经历了<em>选择域名，选择云服务器，再选择web服务器</em>的种种过程后，终于还是发现github的pages空间是最棒的，且不说githubpages作为美国的网站免备案，更是由于其免费，快捷，托管的巨大优势成为小型blog的首选。</p>
<h1 id="选择过程"><a href="#选择过程" class="headerlink" title="选择过程"></a>选择过程</h1><h2 id="一、域名与服务器"><a href="#一、域名与服务器" class="headerlink" title="一、域名与服务器"></a>一、域名与服务器</h2><p>意外的，通过腾讯云的一元钱域名入了此坑，选择了最便宜的.xyz域名,而且腾讯云还体贴的送了十五天的云服务器体验时间，于是在最初里我通过tomcat和javaee创建了一个简单的小网页，本想继续深造，却突然发现，腾讯云这么好不是没有原因的。备案是其一，服务器的超贵价格是其二，一年居然要将近1000rmb，无奈放弃；</p>
<h2 id="二、了解githubpages"><a href="#二、了解githubpages" class="headerlink" title="二、了解githubpages"></a>二、了解githubpages</h2><p>其实github我也是已经注册了很久的一段时间了，却一直没有好好的利用这个全球最先进的分布式系统。githubpages的本意是为人们的项目提供一个简洁明了的介绍页面，但因为其免费快捷可托管的特性，意外的被当做了小型blog的云服务器。关于这点，很多人也有争议，认为这是一种蝗虫行为。</p>
<blockquote>
<p>说中国人是蝗虫还真是不错，github被屏蔽了你就开心了？就像蝗虫，有好东西一拥而上，生怕自己抢不到，吃光了或不抢不过了就换下一个地方，继续搞。<br>这种东西需要写篇文章来宣传么，不知道宣传了以后的后果么，本来是个挺好的社区博客，有可能会因为你这一篇文章，搞的大家以后都用不了了，麻烦作者以后发文章前先考虑对社会的影响，对社区的影响，顾全大局…</p>
</blockquote>
<p>也有人认为这种行为是全球网络和谐的前提和征兆：</p>
<blockquote>
<p>就算 github 真的被墙了，错的也是弄出墙的这些人，跟博主有半毛钱关系？<br>看到好的东西不分享出来，自己偷摸留着，这算什么心态？<br>见到出色的产品，我觉得最好的做法就是像博主一样毫无保留的介绍给别人，方便的话也捎带介绍一下墙是什么。人都有自己的判断力的，能通过对比分出好坏，能想明白他在网上受到了多大限制，为什么一些国外网站不被允许访问。<br>github 是好东西，但藏着不让大伙知道就可以不被墙了？我不这么看，反倒是当每个网民都知道事实的时候，就离墙消失的一天不远了，那时候大家安心的去用 github 不是更好吗？</p>
</blockquote>
<p>但是其实针对博客在githubpages上的创建，在两年前就已经有牛人开发了hexo，专门用来帮助快捷的创建博客，甚至还有多款主题，而github也因此发展出了一个pull分支，就是围绕hexo编写主题。可以说这种行为其实是促进了代码的贡献的，我个人比较倾向于后一种看法！</p>
]]></content>
      <categories>
        <category>前沿技术</category>
      </categories>
      <tags>
        <tag>-技术 -IT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
